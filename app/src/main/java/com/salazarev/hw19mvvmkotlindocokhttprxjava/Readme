    Название приложения: HomeWork19MVVMKotlinDocOkHttpRxJava
    Основной язык написания программного средства: Kotlin
    Автор: Лазарев С.А.
    9.08.21

    Приложение разработано под ОС Android в рамках курса занятий AndroidSchool2021. В рамках работы
нужно были поставлены следующие задачи:

    Выбрать понравившийся публичный сервис https://github.com/public-apis/public-apis и на основе этого сервиса
реализовать приложение, в котором должно быть следующее:
    1. Как минимум 2-3 экрана (можно больше), один из которых со списком, второй с детальной информацией по
выбранному элементу списка.
    2. Данные должны загружаться по сети с помощью OkHttp.
    3. Для многопоточность используем RxJava2 (Single/Maybe/Completable).
    4. Презентационный слой реализован по шаблону MVVM. Для каждого экрана должна быть своя ViewModel.
    5. Приложение должно корректно обрабатывать возможные ошибки (через отображение диалога об ошибке), уметь
отображать процесс загрузки данных. Обратите внимание на сетевые ошибки, в частности.
    6. Старайтесь разбивать по слоям бизнес-логику.
    7. На публичные методы, классы, конструкторы есть документация, оформленная согласна принятым стандартам
JavaDoc/KotlinDoc.
    8. Присутствует файлик Readme, с текстовым описанием приложения, архитектуры, сервиса, который вы
используете.
    9. Можно (но не обязательно) использовать DataBinding/ViewBinding.
    10.Unit-тестирование вы будете подробнее проходить на следующем занятии - можете пока попробовать.

    В качестве источника информации для приложения выступает сервис NBP Web API. он предоставляет
информацию о курсе польского злотого и цены на золото в форматах XML и JSON. В приложении
осущаествляется работа с котировками цен на золото в определённые дни.

    В данном приложении были задействованы следующие библиотекти, заслуживающие особого внимания:
    1. OkHttp - работа с сетевыми запросами;
    2. Moshi - преобразование json запросов в объекты;
    3. RxJava - работа с асинхронным кодом;
    4. RxAndroid - расширение RxJava под нужны ОС Android;
    5. LiveData - хранилища с возможностью наблюдения за приходящими данными.

    В данном приложении была предпринята попытка реализации следующих подходы:
    1. Clean Architecture - разделение приложения на несколько слои представления, бизнес-логики
и хранения данных по принципу: "абстракции не должны зависеть от фреймворков";
    2. MVVM - подход проектирования пользовательского интерфейса с разделением на уровни представления,
управления представлением и бизнес-логики.



